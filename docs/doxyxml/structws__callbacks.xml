<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structws__callbacks" kind="struct" language="C++" prot="public">
    <compoundname>ws_callbacks</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structws__callbacks_1ad70d4c2f2693cc48219fcf8838d42df7" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_connect) (void *data, struct websockets *ws, struct ws_info *info, const char *protocols)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, const char *protocols)</argsstring>
        <name>on_connect</name>
        <briefdescription>
<para>Called upon connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is not validated if matches the proposed protocols. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="70" column="3" bodyfile="orca/common/websockets.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1aa34b447d6d50815d1836a703daa6a908" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_text) (void *data, struct websockets *ws, struct ws_info *info, const char *text, size_t len)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, const char *text, size_t len)</argsstring>
        <name>on_text</name>
        <briefdescription>
<para>Reports UTF-8 text messages. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>it&apos;s guaranteed to be NULL (\0) terminated, but the UTF-8 is not validated. If it&apos;s invalid, consider closing the connection with WS_CLOSE_REASON_INCONSISTENT_DATA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="78" column="3" bodyfile="orca/common/websockets.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1acb1ab79ea01d8c6471d04075f982d07e" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_binary) (void *data, struct websockets *ws, struct ws_info *info, const void *mem, size_t len)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, const void *mem, size_t len)</argsstring>
        <name>on_binary</name>
        <briefdescription>
<para>reports binary data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="82" column="3" bodyfile="orca/common/websockets.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1ae57a9a9d2b8a55cf3313af6b428d51c4" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_ping) (void *data, struct websockets *ws, struct ws_info *info, const char *reason, size_t len)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, const char *reason, size_t len)</argsstring>
        <name>on_ping</name>
        <briefdescription>
<para>reports PING. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>if provided you should reply with <ref refid="websockets_8h_1a05815c7f0d0a923afd7f0e96c2411131" kindref="member">ws_pong()</ref>. If not provided, pong is sent with the same message payload. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="89" column="3" bodyfile="orca/common/websockets.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1a7ea0359da5a0e051cd315a8637ea9107" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_pong) (void *data, struct websockets *ws, struct ws_info *info, const char *reason, size_t len)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, const char *reason, size_t len)</argsstring>
        <name>on_pong</name>
        <briefdescription>
<para>reports PONG. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="93" column="3" bodyfile="orca/common/websockets.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1a01d9ba22f708696c3cf35bed2dad5cd4" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* ws_callbacks::on_close) (void *data, struct websockets *ws, struct ws_info *info, enum ws_close_reason wscode, const char *reason, size_t len)</definition>
        <argsstring>)(void *data, struct websockets *ws, struct ws_info *info, enum ws_close_reason wscode, const char *reason, size_t len)</argsstring>
        <name>on_close</name>
        <briefdescription>
<para>reports server closed the connection with the given reason. </para>
        </briefdescription>
        <detaileddescription>
<para>Clients should not transmit any more data after the server is closed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="100" column="3" bodyfile="orca/common/websockets.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structws__callbacks_1a3f24a596e673c6ed86ae31c22703e512" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* ws_callbacks::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>user arbitrary data to be passed around callbacks </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="orca/common/websockets.h" line="104" column="8" bodyfile="orca/common/websockets.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="orca/common/websockets.h" line="64" column="19" bodyfile="orca/common/websockets.h" bodystart="64" bodyend="105"/>
    <listofallmembers>
      <member refid="structws__callbacks_1a3f24a596e673c6ed86ae31c22703e512" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>data</name></member>
      <member refid="structws__callbacks_1acb1ab79ea01d8c6471d04075f982d07e" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_binary</name></member>
      <member refid="structws__callbacks_1a01d9ba22f708696c3cf35bed2dad5cd4" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_close</name></member>
      <member refid="structws__callbacks_1ad70d4c2f2693cc48219fcf8838d42df7" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_connect</name></member>
      <member refid="structws__callbacks_1ae57a9a9d2b8a55cf3313af6b428d51c4" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_ping</name></member>
      <member refid="structws__callbacks_1a7ea0359da5a0e051cd315a8637ea9107" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_pong</name></member>
      <member refid="structws__callbacks_1aa34b447d6d50815d1836a703daa6a908" prot="public" virt="non-virtual"><scope>ws_callbacks</scope><name>on_text</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
